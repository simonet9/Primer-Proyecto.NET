@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar

<MudForm @ref="_form" Model="_modelo">
    <MudGrid Spacing="3">
        @if (TipoFormulario == "registro")
        {
            <MudItem xs="12" sm="6">
                <MudTextField T="string" @bind-Value="_modelo.Nombre" Label="Nombre" Required="true"
                              RequiredError="El nombre es requerido" Variant="Variant.Outlined"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person"
                              AdornmentColor="Color.Secondary" />
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudTextField T="string" @bind-Value="_modelo.Apellido" Label="Apellido" Required="true"
                              RequiredError="El apellido es requerido" Variant="Variant.Outlined"
                              Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Person"
                              AdornmentColor="Color.Secondary" />
            </MudItem>
        }

        <MudItem xs="12">
            <MudTextField T="string" @bind-Value="_modelo.Email" Label="Correo Electrónico" Required="true"
                          RequiredError="El correo es requerido" Variant="Variant.Outlined"
                          InputType="InputType.Email" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Email"
                          AdornmentColor="@(TipoFormulario == "login" ? Color.Primary : Color.Secondary)" />
        </MudItem>

        <MudItem xs="12">
            <MudTextField T="string" @bind-Value="_modelo.Password" Label="Contraseña" Required="true"
                          RequiredError="La contraseña es requerida" Variant="Variant.Outlined"
                          InputType="@(_verPassword ? InputType.Text : InputType.Password)"
                          Adornment="Adornment.End"
                          AdornmentIcon="@(_verPassword ? Icons.Material.Filled.Visibility : Icons.Material.Filled.VisibilityOff)"
                          OnAdornmentClick="() => _verPassword = !_verPassword"
                          AdornmentColor="@(TipoFormulario == "login" ? Color.Primary : Color.Secondary)" />
        </MudItem>

        @if (TipoFormulario == "login")
        {
            <MudItem xs="12">
                <MudCheckBox T="bool" @bind-Checked="_modelo.RecordarSesion"
                             Label="Recordar sesión" Color="Color.Primary" />
            </MudItem>
        }

        <MudItem xs="12">
            <MudButton Variant="Variant.Filled"
                       Color="@(TipoFormulario == "login" ? Color.Primary : Color.Secondary)"
                       FullWidth="true"
                       Size="Size.Large"
                       OnClick="ProcesarFormulario"
                       Disabled="_procesando"
                       Class="mt-4 py-2"
                       AriaLabel="@TextoBoton">
                @if (_procesando)
                {
                    <MudProgressCircular Size="Size.Small" Indeterminate="true" Class="me-2" />
                    @MensajeProceso
                }
                else
                {
                    @TextoBoton
                }
            </MudButton>
        </MudItem>
    </MudGrid>
</MudForm>

<style>
    .mud-input-control {
        transition: transform 0.2s ease;
    }

    .mud-input-control:focus-within {
        transform: translateY(-2px);
    }

    .mud-button {
        border-radius: 8px;
        font-weight: 500;
        letter-spacing: 1px;
        transition: all 0.3s ease;
    }

    .mud-button:hover {
        transform: translateY(-2px);
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
    }
</style>

@code {
    [Parameter] public string TipoFormulario { get; set; } = "login";
    [Parameter] public EventCallback<(string Email, string Password)> OnLoginCallback { get; set; }
    [Parameter] public EventCallback<(string Nombre, string Apellido, string Email, string Password)> OnRegistroCallback { get; set; }
    [Parameter] public EventCallback<string> OnError { get; set; }

    private MudForm _form = null!;
    private bool _procesando, _verPassword;

    private FormularioModel _modelo = new();

    private string TextoBoton => TipoFormulario == "login" ? "Iniciar Sesión" : "Registrarse";
    private string MensajeProceso => TipoFormulario == "login" ? "Iniciando sesión..." : "Registrando...";

    private async Task ProcesarFormulario()
    {
        await _form.Validate();
        if (!_form.IsValid)
            return;

        try
        {
            _procesando = true;
            if (TipoFormulario == "login")
            {
                await OnLoginCallback.InvokeAsync((_modelo.Email, _modelo.Password));
            }
            else
            {
                await OnRegistroCallback.InvokeAsync((_modelo.Nombre, _modelo.Apellido, _modelo.Email, _modelo.Password));
            }
        }
        catch (Exception ex)
        {
            await OnError.InvokeAsync(ex.Message);
            Snackbar.Add(ex.Message, Severity.Error);
        }
        finally
        {
            _procesando = false;
        }
    }

    private class FormularioModel
    {
        [Required(ErrorMessage = "El nombre es requerido")]
        public string Nombre { get; set; } = string.Empty;

        [Required(ErrorMessage = "El apellido es requerido")]
        public string Apellido { get; set; } = string.Empty;

        [Required(ErrorMessage = "El correo es requerido")]
        [EmailAddress(ErrorMessage = "El correo no es válido")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "La contraseña es requerida")]
        [MinLength(6, ErrorMessage = "Debe tener al menos 6 caracteres")]
        public string Password { get; set; } = string.Empty;

        public bool RecordarSesion { get; set; }
    }
}
