@page "/Login"
@page "/Registro"
@using CentroEventos.Aplicacion.Entities
@using CentroEventos.UI.Components.Pages.Shared
@inject Aplicacion.Interfaces.IRepositorioUsuario RepoUsuario
@inject NavigationManager Navigation
@inject Aplicacion.UseCases.Users.RegistrarUsuarioUseCase RegistrarUsuarioUseCase
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium" Class="login-container d-flex justify-center align-center">
    <MudPaper Elevation="3" Class="login-card pa-6" Style="margin-top: 20px">
        <MudGrid>
            <MudItem xs="12" md="6" Class="login-form-side pe-md-4">
                <MudPaper Elevation="0" Class="pa-4" Style="background-color: transparent;">
                    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">
                        @(_isLoginMode ? "Iniciar Sesión" : "Crear Cuenta")
                    </MudText>

                    <FormularioUsuario 
                        TipoFormulario="@(_isLoginMode ? "login" : "registro")"
                        OnLoginCallback="OnLoginExitoso"
                        OnRegistroCallback="RegistroExitoso"
                        OnError="@MostrarError" />
                </MudPaper>
            </MudItem>

            <MudItem xs="12" md="6" Class="d-flex align-center login-info-side">
                <div class="d-flex flex-column align-center py-8 px-4 w-100">
                    <MudText Typo="Typo.h4" Align="Align.Center" Class="mb-4">
                        @(_isLoginMode ? "¿Nuevo aquí?" : "¿Ya tienes cuenta?")
                    </MudText>
                    <MudText Align="Align.Center" Class="mb-4">
                        @(_isLoginMode ? 
                            "Ingresa tus datos personales y comienza tu viaje con nosotros" : 
                            "Para mantenerte conectado con nosotros, inicia sesión con tus datos personales")
                    </MudText>
                    <MudButton Variant="Variant.Outlined" 
                               Color="Color.Default"
                               Size="Size.Large"
                               OnClick="@(() => CambiarModo(!_isLoginMode))"
                               Class="mt-4">
                        @(_isLoginMode ? "Registrarse" : "Iniciar Sesión")
                    </MudButton>
                </div>
            </MudItem>
        </MudGrid>
    </MudPaper>
</MudContainer>


@code {
    private bool _isLoginMode = true;

    private void CambiarModo(bool login)
    {
        _isLoginMode = login;
        StateHasChanged();
    }
    private async Task OnLoginExitoso((string Email, string Password) datos)
    {
        var usuario = RepoUsuario.ObtenerPorEmail(datos.Email);

        if (usuario == null)
        {
            MostrarError("Usuario no encontrado.");
            return;
        }

        if (usuario.Contrasena != datos.Password)
        {
            MostrarError("Contraseña incorrecta.");
            return;
        }

        Snackbar.Add("Inicio de sesión exitoso", Severity.Success);
        await Task.Delay(1500); 
        Navigation.NavigateTo("/Index", true);
    }

    private async Task RegistroExitoso((string Nombre, string Apellido, string Email, string Password) datos)
    {
        try
        {
            RegistrarUsuarioUseCase.Ejecutar(
                datos.Nombre,
                datos.Apellido,
                datos.Email,
                datos.Password
            );

            Snackbar.Add("Registro exitoso", Severity.Success);
            await Task.Delay(1500);
            Navigation.NavigateTo("/login", true);
        }
        catch (Exception ex)
        {
            MostrarError($"Error al registrar usuario: {ex.Message}");
        }
    }
    private void MostrarError(string mensaje) => Snackbar.Add(mensaje, Severity.Error);
}