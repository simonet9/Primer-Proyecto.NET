@page "/reservas/modificar/{Id:guid}"
@using CentroEventos.Aplicacion.Entities
@using CentroEventos.Aplicacion.UseCases.Reservas
@using CentroEventos.Aplicacion.Service
@using CentroEventos.Aplicacion.Exceptions
@using CentroEventos.Aplicacion.Interfaces
@using CentroEventos.Aplicacion.Enum
@inject ModificarReservaUseCase ModificarReservaUseCase
@inject IRepositorioReserva RepositorioReserva
@inject IRepositorioPersona RepositorioPersona
@inject IRepositorioEventoDeportivo RepositorioEvento
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject UsuarioLogueado UsuarioLogueado

<PageTitle>Editar Reserva</PageTitle>

<MudContainer MaxWidth="MaxWidth.Medium" Class="py-4">
    <MudPaper Elevation="3" Class="pa-8 rounded-lg">
        <MudText Typo="Typo.h4" Color="Color.Primary" Align="Align.Center" Class="mb-4 font-weight-bold">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="me-2"/>Editar Reserva
        </MudText>
            <FormularioNuevaReserva 
                OnGuardar="GuardarCambios" 
                OnError="ManejarError"
                @key="_reserva.Id"
                />
            <div class="d-flex justify-space-between mt-6">
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancelar" StartIcon="@Icons.Material.Filled.ArrowBack">
                    Cancelar
                </MudButton>
            </div>
    </MudPaper>
</MudContainer>

@code {
    [Parameter] public Guid Id { get; set; }
    private Reserva _reserva = null!;

    protected override void OnInitialized()
    {
        var usuarioLogueado = UsuarioLogueado.UsuarioActual;
        if (usuarioLogueado == null)
        {
            Navigation.NavigateTo("/login", true);
            return;
        }
        try
        {
            _reserva = RepositorioReserva.BuscarPorId(Id)!;
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
            Navigation.NavigateTo("/reservas/listar");
        }
    }

    private async Task GuardarCambios((string nombreEvento, DateTime fechaAltaReserva, Estado estadoAsistencia, string responsableDni) datos)
    {
        try
        {
            var persona = RepositorioPersona.ObtenerPorDocumento(datos.responsableDni) ?? throw new EntidadNotFoundException("No se encontró la persona responsable.");
            var evento = RepositorioEvento.BuscarPorNombre(datos.nombreEvento) ?? throw new EntidadNotFoundException("No se encontró el evento.");

            _reserva.PersonaId = persona.Id;
            _reserva.EventoDeportivoId = evento.Id;
            _reserva.FechaAltaReserva = datos.fechaAltaReserva;
            _reserva.EstadoAsistencia = datos.estadoAsistencia;
            await Task.Run(() =>
            {
                if (UsuarioLogueado.UsuarioActual != null) ModificarReservaUseCase.Ejecutar(_reserva, UsuarioLogueado.UsuarioActual.Id);
            });
            Snackbar.Add("Reserva modificada correctamente", Severity.Success);
            Navigation.NavigateTo("/reservas/listar");
        }
        catch (Exception ex)
        {
            ManejarError(ex.Message);
        }
    }

    private void ManejarError(string mensaje)
    {
        Snackbar.Add(mensaje, Severity.Error);
    }

    private void Cancelar()
    {
        Navigation.NavigateTo("/reservas/listar");
    }
}