@page "/eventos/disponibles"
@using CentroEventos.Aplicacion.Entities
@using CentroEventos.Aplicacion.Service
@using CentroEventos.Aplicacion.UseCases.Evento
@inject ListarEventosConCupoDisponibleUseCase ListarEventosConCupoUseCase
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject UsuarioLogueado usuarioLogueado

<div class="container-fluid">
    <MudPaper Elevation="3" Class="pa-6 rounded-lg">
        <MudText Typo="Typo.h4" Color="Color.Primary" Class="mb-6 font-weight-bold">
            <MudIcon Icon="@Icons.Material.Filled.EventAvailable" Class="mr-3"/>
            Eventos con Cupo Disponible
        </MudText>

        @if (!_eventos.Any())
        {
            <MudAlert Severity="Severity.Info">No hay eventos con cupo disponible.</MudAlert>
        }
        else
        {
            <MudTable Items="_eventos" Hover="true" Striped="true" Elevation="0" Class="mt-4">
                <HeaderContent>
                    <MudTh><MudText Typo="Typo.subtitle2">Nombre</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2">Descripción</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2">Fecha y Hora</MudText></MudTh>
                    <MudTh><MudText Typo="Typo.subtitle2">Cupo Máximo</MudText></MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd DataLabel="Nombre">@context.Nombre</MudTd>
                    <MudTd DataLabel="Descripción">@context.Description</MudTd>
                    <MudTd DataLabel="Fecha y Hora">@context.FechaHoraInicio.ToString("g")</MudTd>
                    <MudTd DataLabel="Cupo Máximo">@context.CupoMaximo</MudTd>
                </RowTemplate>
                <LoadingContent>
                    <MudText Class="pa-4" Align="Align.Center">Cargando eventos...</MudText>
                </LoadingContent>
            </MudTable>
        }

        <div class="d-flex justify-end mt-4">
            <MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="Volver">
                Volver
            </MudButton>
        </div>
    </MudPaper>
</div>

@code {
    private List<EventoDeportivo> _eventos = new();

    protected override void OnInitialized()
    {
        var usuario = usuarioLogueado.UsuarioActual;
        if (usuario == null)
        {
            NavigationManager.NavigateTo("/login", true);
            return;
        }
        CargarEventos();
    }

    private void CargarEventos()
    {
        try
        {
            _eventos = ListarEventosConCupoUseCase.Ejecutar();
        }
        catch (Exception ex)
        {
            _eventos = new List<EventoDeportivo>();
            Snackbar.Add($"Error al cargar los eventos: {ex.Message}", Severity.Error);
        }
    }

    private void Volver()
    {
        NavigationManager.NavigateTo("/eventos/listar");
    }
}